{"version":3,"sources":["actions/actions.js","helpers/idCreator.js","sagas/sagas.js","reducers/newsReducer.js","reducers/onlineStatusReducer.js","reducers/combinedReducers.js","data/routes.js","components/NavigationListItem.js","components/NavigationList.js","components/Navigation.js","components/MobileNavigation.js","components/Header.js","components/NewsGridArticle.js","components/NewsGrid.js","components/PlaceholderGridArticle.js","components/PlaceholderGrid.js","components/OnlineStatusSection.js","containers/NewsLanding.js","containers/NewsArticleLanding.js","routes/Main.js","App.js","serviceWorker.js","index.js"],"names":["getNewsAction","category","type","getNewsSuccessAction","data","getNewsFailureAction","onlineStatusAction","online","idCreator","str","replace","toLowerCase","getLatestNews","isAppOnline","watchGetLatestNews","rootSaga","result","articles","updatedArticles","regenerator_default","a","wrap","_context","prev","next","axios","get","concat","sent","map","item","id","title","Object","objectSpread","put","t0","stop","_marked","_context2","window","navigator","onLine","_marked2","_context3","_marked3","_context4","takeLatest","_marked4","newsReducer","state","arguments","length","undefined","action","defineProperty","status","onlineStatusReducer","sagaMiddleware","createSagaMiddleware","reducer","combineReducers","store","createStore","applyMiddleware","logger","run","routes","route","NavigationListItem","_ref","onClick","react_default","createElement","className","react_router_dom","to","activeClassName","NavigationList","hideNavigation","index","components_NavigationListItem","key","Navigation","components_NavigationList","MobileNavigation","showNavigation","Header","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","headerHidden","bind","assertThisInitialized","setState","scrollTo","components_MobileNavigation","components_Navigation","props","Component","NewsGridArticle","article","articleId","src","urlToImage","alt","source","name","NewsGrid","components_NewsGridArticle","PlaceholderGridArticle","PlaceholderGrid","toConsumableArray","Array","components_PlaceholderGridArticle","OnlineStatusSection","NewsLanding","getNewsDispatch","grid","gridClass","currentNews","news","components_NewsGrid","match","path","components_PlaceholderGrid","onlineStatus","components_OnlineStatusSection","withRouter","connect","dispatch","NewsArticleLanding","fetchNews","_this2","newsObj","newsArticle","find","params","content","Main","react_router","exact","render","containers_NewsLanding","containers_NewsArticleLanding","assign","App","es","components_Header","routes_Main","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.34ca9a72.chunk.js","sourcesContent":["// calling to fetch the news\nexport const getNewsAction = (category) => {\n  return {\n    type: 'GET_LATEST_NEWS',\n    category\n  }\n}\n\n// when the news is updated we will store all articles inthe correct category\nexport const getNewsSuccessAction = (data, category) => {\n  return {\n    type: 'UPDATE_NEWS_SUCCESS',\n    data,\n    category\n  }\n}\n\n// failed to retrieve the news because of an error\nexport const getNewsFailureAction = (data, category) => {\n  return {\n    type: 'UPDATE_NEWS_FAILURE',\n    data,\n    category\n  }\n}\n\n// action for if the app is online or offline\nexport const onlineStatusAction = (data) => {\n  return {\n    type: 'APP_ONLINE',\n    online: data\n  }\n}","// idCreator converts the article title in a url friendly link\nexport function idCreator(str) {\n  return str.replace(/[\\W_]+/g,\"-\").toLowerCase();\n}","import { takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { \n  getNewsSuccessAction,\n  getNewsFailureAction,\n  onlineStatusAction\n} from '../actions/actions';\n\nimport { idCreator } from '../helpers/idCreator';\n\n// this function will get the latest news and dispatch an action depending on the outcome\n// passing in the action data containing the category which is currently selected\n// getNewsSuccessAction() if successful\n// getNewsFailureAction() if there was an error\nfunction* getLatestNews(data) {\n\n  // we convert 'home' to general as using 'home' for the category parameter will fail\n  const category = data.category === 'home' ? 'general' : data.category;\n\n  try {\n    const result = yield axios.get(`https://newsapi.org/v2/top-headlines?country=us&category=${category}&apiKey=4d0e3b7a4c014287a7bf2b3b52d5edf3`);\n    const articles = yield result.data.articles;\n\n    // before writing to the store, we will add the id of the article for routing purposes\n    const updatedArticles = articles.map(item => {\n      const id = idCreator(item.title);\n      return {\n        ...item, \n        id\n      }\n    });\n\n    yield put(getNewsSuccessAction(updatedArticles, category));\n\n  } catch(error) {\n    yield put(getNewsFailureAction(error, category));\n  }\n}\n\n// this will check whether the app is online using the window.navigator.onLine function\nfunction* isAppOnline() {\n  let online = true;\n  \n  if(!window.navigator.onLine) {\n    online = false;\n  }\n\n  yield put(onlineStatusAction(online));\n}\n\n// when we request the news, we will call getLatestNews() and isAppOnline()\nfunction* watchGetLatestNews(data) {\n  yield getLatestNews(data);\n  yield isAppOnline();\n}\n\n// this is the watcher function\nexport default function* rootSaga() {\n  yield takeLatest('GET_LATEST_NEWS', watchGetLatestNews);\n}","const newsReducer = (state = {}, action) => {\n  switch(action.type) {\n\n    // UPDATE_NEWS_SUCCESS creates/replaces the category object with news articles\n    case 'UPDATE_NEWS_SUCCESS':\n      return {\n        ...state,\n        [`${action.category}`]: {\n          articles: action.data,\n          status: 'ok'\n        }\n      }\n\n    // UPDATE_NEWS_FAILURE changes the status to 'error' but still keeping the articles for offline viewing. \n    case 'UPDATE_NEWS_FAILURE': \n      return {\n        ...state,\n          [`${action.category}`]: {\n            articles: state[`${action.category}`] ? state[`${action.category}`].articles : [],\n            status: 'error'\n          }\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default newsReducer;","const onlineStatusReducer = (state = { online: true }, action) => {\n  switch(action.type) {\n\n    // updates the status of the app true/false for whether there is an internet connection or not\n    case 'APP_ONLINE':\n      return { online: action.online }\n\n    default:\n      return state;\n  }\n}\n\nexport default onlineStatusReducer;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootSaga from '../sagas/sagas';\nimport newsReducer from './newsReducer';\nimport onlineStatusReducer from './onlineStatusReducer';\n\n// now to create the saga middleware\nconst sagaMiddleware = createSagaMiddleware(rootSaga);\n\n// combining the reducers\nconst reducer = combineReducers({\n  newsReducer,\n  onlineStatusReducer\n});\n\n// adding the middleware and the logger to see what the current and next state is in the console\nconst store = createStore(reducer,\n  applyMiddleware(sagaMiddleware, logger)\n);\n\n// run the root saga\nsagaMiddleware.run(rootSaga);\n\nexport default store;","// routes - the categories available from newsapi.org\nconst routes = [\n  {\n    route: 'home',\n    category: 'general'\n  },\n  {\n    route: 'business',\n    category: 'business'\n  },\n  {\n    route: 'entertainment',\n    category: 'entertainment'\n  },\n  {\n    route: 'health',\n    category: 'health'\n  },\n  {\n    route: 'science',\n    category: 'science'\n  },\n  {\n    route: 'sports',\n    category: 'sports'\n  },\n  {\n    route: 'technology',\n    category: 'technology'\n  }\n]\n\nexport default routes;","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nconst NavigationListItem = ({ item, onClick }) => (\n  <li \n    className=\"navigation__main__list-item\"\n    onClick={onClick}\n  >\n    <NavLink\n      to={`/${item.route}`}\n      className=\"navigation__main__list-item__link\"\n      activeClassName=\"navigation__main__list-item__link--active\"\n    >\n      {item.route}\n    </NavLink>\n  </li>\n);\n\nNavigationListItem.propTypes = {\n  item: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default NavigationListItem;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport NavigationListItem from './NavigationListItem';\n\nconst NavigationList = ({ routes, hideNavigation }) => (\n  <ul className=\"navigation__main\">\n    {\n      routes.map((item, index) => (\n        <NavigationListItem\n          key={index}\n          item={item}\n          onClick={hideNavigation}\n        />\n      ))\n    }\n  </ul>\n);\n\nNavigationList.propTypes = {\n  routes: PropTypes.array.isRequired,\n  hideNavigation: PropTypes.func.isRequired\n}\n\nexport default NavigationList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport NavigationList from './NavigationList';\n\nconst Navigation = ({ routes, hideNavigation }) => (\n  <nav className=\"navigation\"> \n    <NavigationList \n      routes={routes}\n      hideNavigation={hideNavigation} \n    />\n  </nav>\n);\n\nNavigation.propTypes = {\n  routes: PropTypes.array.isRequired,\n  hideNavigation: PropTypes.func.isRequired\n}\n\nexport default Navigation;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MobileNavigation = ({ showNavigation, hideNavigation }) => (\n  <section className=\"header-content__mobile-buttons\">\n    <span\n      className=\"header-content__mobile-buttons__menu\"\n      onClick={showNavigation}>\n      Menu\n    </span>\n    <span \n      onClick={hideNavigation}>\n      x\n    </span>\n  </section>\n);\n\nMobileNavigation.propTypes = {\n  showNavigation: PropTypes.func.isRequired,\n  hideNavigation: PropTypes.func.isRequired\n}\n\nexport default MobileNavigation;","import React, { Component } from 'react';\nimport Navigation from './Navigation';\nimport MobileNavigation from './MobileNavigation';\n\nclass Header extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      headerHidden: true\n    }\n\n    this.hideNavigation = this.hideNavigation.bind(this);\n    this.showNavigation = this.showNavigation.bind(this);\n  }\n\n  // hiding the mobile navigation\n  hideNavigation() {\n    this.setState({\n      headerHidden: true\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  // showing the mobile navigation\n  showNavigation() {\n    this.setState({\n      headerHidden: false\n    });\n  }\n\n  render() {\n    return (\n      <header className={`header-content ${this.state.headerHidden ? `header-content--hidden` : ``}`}>\n        <MobileNavigation \n          hideNavigation={this.hideNavigation}\n          showNavigation={this.showNavigation}\n        />\n        <Navigation \n          routes={this.props.routes}\n          hideNavigation={this.hideNavigation}\n        />\n      </header>\n    )\n  }\n}\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { idCreator } from '../helpers/idCreator';\n\nconst NewsGridArticle = ({ article, category, index }) => {\n  \n  const articleId = idCreator(article.title);\n  return (\n    <article className={`article article--${index}`}>\n      <div className=\"article__article-image-container\">\n        <img\n          className=\"article__article-image\"\n          src={article.urlToImage} alt={article.title} \n        />\n      </div>\n      <div className=\"article__article-heading-container\">\n        <span className=\"article__article-source\">\n          {article.source.name}\n        </span>\n        <h2 className=\"article__article-heading\">\n          <Link \n            to={`${category}/${articleId}`}\n            className=\"article__article-heading-link\"\n          >\n            {article.title}\n          </Link>\n        </h2>\n      </div>\n    </article>\n  )\n}\n\nNewsGridArticle.propTypes = {\n  articles: PropTypes.array,\n  category: PropTypes.string,\n  index: PropTypes.number\n}\n\nexport default NewsGridArticle;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport NewsGridArticle from './NewsGridArticle';\n\nconst NewsGrid = ({ articles, category }) => (\n  articles.map((item, index) => {\n    return <NewsGridArticle\n      article={item}\n      category={category}\n      index={index}\n      key={index}\n    />\n  })\n);\n\nNewsGrid.propTypes = {\n  articles: PropTypes.array.isRequired,\n  category: PropTypes.string.isRequired\n}\n\nexport default NewsGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PlaceholderGridArticle = ({ index }) => {\n  return (\n    <div className={`article article--${index}`} />\n  ) \n}\n\nPlaceholderGridArticle.propTypes = {\n  index: PropTypes.number.isRequired\n}\n\nexport default PlaceholderGridArticle;","import React from 'react';\nimport PlaceholderGridArticle from './PlaceholderGridArticle';\n\nconst PlaceholderGrid = () => {\n  return (\n    [...Array(10)].map((item, index) => {\n      return <PlaceholderGridArticle\n        index={index}\n        key={index}\n      />\n    })\n  )\n}\n\nexport default PlaceholderGrid;","import React from 'react';\n\nconst OnlineStatusSection = () => (\n  <section className=\"offline-status\">\n    <span className=\"offline-status__message\">\n      There is a network error and your internet connection has dropped. Please try to reconnect!\n    </span>\n  </section>\n);\n\nexport default OnlineStatusSection;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { getNewsAction } from '../actions/actions';\n\nimport NewsGrid from '../components/NewsGrid';\nimport PlaceholderGrid from '../components/PlaceholderGrid';\nimport OnlineStatusSection from '../components/OnlineStatusSection';\n\nclass NewsLanding extends Component {\n\n  // on componentDidMount we will dispatch an action to call the API.\n  // we will pass the category parameter that was passed through from the <Route />\n  componentDidMount() {\n    this.props.getNewsDispatch(this.props.category);\n  }\n\n  render() {\n    const currentNews = this.props.news[this.props.category];\n\n    // here we are seeing if the category exists in the reducer.\n    // if it currently does not exist and we are making the API call, we will show the loading section\n    let grid;\n    let gridClass;\n\n    if(currentNews) {\n    \n      // 3 states for the status - ok, error, loading. Default is loading.\n      // when there is an error, if there is articles in that current category in the reducer, we will show them these\n      // articles. This is more user friendly.\n      switch(currentNews.status) {\n        case 'ok':\n          grid = <NewsGrid articles={currentNews.articles} category={this.props.match.path} />\n          gridClass = 'loaded';\n          break;\n        case 'error':\n          grid = currentNews.articles.length > 0 ? <NewsGrid articles={currentNews.articles} category={this.props.match.path} /> : <p>We are having trouble fetching your news.</p>\n          gridClass = 'loaded';\n          break;\n        default: \n          grid = <PlaceholderGrid />\n          gridClass = 'loading';\n          break;\n      }\n    } else {\n      grid = <PlaceholderGrid />\n      gridClass = 'loading';\n    }\n\n    return (\n      <section className=\"main-content\">\n        {!this.props.onlineStatus.online && <OnlineStatusSection />}\n        <h1 className=\"page-title\">\n          {this.props.category} News\n        </h1>\n        <section className={`news-grid news-grid--${gridClass}`}>\n          {grid}\n        </section>\n      </section>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    news: state.newsReducer,\n    onlineStatus: state.onlineStatusReducer\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getNewsDispatch: (category) => dispatch(getNewsAction(category))\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(NewsLanding));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { getNewsAction } from '../actions/actions';\n\nclass NewsArticleLanding extends Component {\n\n  constructor() {\n    super();\n\n    this.fetchNews = this.fetchNews.bind(this);\n  }\n\n  // function is called when a user lands on an article page and there is no current\n  // news from that category\n  fetchNews() {\n    if(!this.props.news[this.props.category]) {\n      this.props.getNewsDispatch(this.props.category);\n    }\n  }\n\n  componentDidMount() {\n    this.fetchNews()\n  }\n\n  render() {\n\n    const newsObj = this.props.news;\n\n    if(newsObj[this.props.category]) {\n\n      const newsArticle = newsObj[this.props.category].articles.find(item => {\n        return item.id ===  this.props.match.params.articleId;\n      });\n\n      if(newsArticle) {\n        return (\n          <section className=\"main-content\">\n            <div className=\"page-article\">\n              <h1 className=\"page-title\">\n                {newsArticle.title}\n              </h1>\n              <img\n                className=\"page-article__image\"\n                src={newsArticle.urlToImage} alt={newsArticle.title} \n              />\n              <p>\n                {newsArticle.content}\n              </p>\n            </div>\n          </section>\n        )\n      } else {\n        return <p>This article does not exist anymore</p>\n      }\n    } else {\n      return <p>Currently fetching this article</p>\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    news: state.newsReducer\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getNewsDispatch: (category) => dispatch(getNewsAction(category))\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(NewsArticleLanding));\n","import React, { Component } from 'react';\n\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport NewsLanding from '../containers/NewsLanding';\nimport NewsArticleLanding from '../containers/NewsArticleLanding';\n\n// Main is the container that houses the routes of the app\nclass Main extends Component {\n  render() {\n    return (\n      <main className=\"main\">\n        <Route exact path=\"/\" render={() => (\n            <Redirect to=\"/home\"/>\n          )}\n        />\n        {\n          this.props.routes.map((item, index) => (\n            <Route\n              exact\n              path={`/${item.route}`}\n              key={index}\n              render={() => (\n                <NewsLanding category={item.category} />\n              )}\n            />\n          ))\n        }\n        {\n          this.props.routes.map((item, index) => (\n            <Route\n              path={`/${item.route}/:articleId`}\n              key={index}\n              render={(props) => (\n                <NewsArticleLanding {...props} category={item.category} />\n              )}\n            />\n          ))\n        }\n      </main>\n    )\n  }\n}\n\nexport default Main;","import React from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\n\nimport store from './reducers/combinedReducers';\n\nimport routes from './data/routes';\n\nimport Header from './components/Header';\nimport Main from './routes/Main';\n\nimport './styles/app.scss';\n\nconst App = () => (\n  <Provider store={store}>\n    <Router>\n      <div className=\"page-container\">\n        <Header routes={routes} />\n        <Main routes={routes} />  \n      </div>\n    </Router>\n  </Provider>\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// registering the service worker below\nserviceWorker.register();"],"sourceRoot":""}